<?php
/**
 *  This file was generated with crodas/SimpleView (https://github.com/crodas/SimpleView)
 *  Do not edit this file.
 *
 */

namespace {


    class base_template_cae776d793caf672c15e1210f1d0eb6609155ade
    {
        protected $parent;
        protected $child;
        protected $context;

        public function yield_parent($name, $args)
        {
            $method = "section_" . sha1($name);

            if (is_callable(array($this->parent, $method))) {
                $this->parent->$method(array_merge($this->context, $args));
                return true;
            }

            if ($this->parent) {
                return $this->parent->yield_parent($name, $args);
            }

            return false;
        }

        public function do_yield($name, Array $args = array())
        {
            if ($this->child) {
                // We have a children template, we are their base
                // so let's see if they have implemented by any change
                // this section
                if ($this->child->do_yield($name, $args)) {
                    // yes!
                    return true;
                }
            }

            // Do I have this section defined?
            $method = "section_" . sha1($name);
            if (is_callable(array($this, $method))) {
                // Yes!
                $this->$method(array_merge($this->context, $args));
                return true;
            }

            // No :-(
            return false;
        }

    }

    /** 
     *  Template class generated from Template.tpl.php
     */
    class class_a4423e79cd6df51ca66b13affa3d681f3041bae4 extends base_template_cae776d793caf672c15e1210f1d0eb6609155ade
    {

        public function hasSection($name)
        {

            return false;
        }


        public function renderSection($name, Array $args = array(), $fail_on_missing = true)
        {
            if (!$this->hasSection($name)) {
                if ($fail_on_missing) {
                    throw new \RuntimeException("Cannot find section {$name}");
                }
                return "";
            }

        }

        public function enhanceException(Exception $e, $section = NULL)
        {
            if (!empty($e->enhanced)) {
                return;
            }

            $message = $e->getMessage() . "( IN " . 'Template.tpl.php';
            if ($section) {
                $message .= " | section: {$section}";
            }
            $message .= ")";

            $object   = new ReflectionObject($e);
            $property = $object->getProperty('message');
            $property->setAccessible(true);
            $property->setValue($e, $message);

            $e->enhanced = true;
        }

        public function render(Array $vars = array(), $return = false)
        {
            try {
                return $this->_render($vars, $return);
            } catch (Exception $e) {
                if ($return) ob_get_clean();
                $this->enhanceException($e);
                throw $e;
            }
        }

        public function _render(Array $vars = array(), $return = false)
        {
            $this->context = $vars;

            extract($vars);
            if ($return) {
                ob_start();
            }

            echo "<?php\n\n";
            $ns = "Watcher\\r" . uniqid(true);
            $this->context['ns'] = $ns;
            echo "\nnamespace ";
            echo $ns . ";\n\nclass Watcher\n{\n\nfunction get_list() {\n    return array(\n        'files' => array(\n";
            foreach($files as $path => $ttl) {

                $this->context['path'] = $path;
                $this->context['ttl'] = $ttl;
                echo "            ";
                var_export($path);
                echo ",\n";
            }
            echo "        ),\n        'dirs' => array(\n";
            foreach($dirs as $path => $ttl) {

                $this->context['path'] = $path;
                $this->context['ttl'] = $ttl;
                echo "            ";
                var_export($path);
                echo ",\n";
            }
            echo "        ),\n        'glob' => array(\n";
            foreach($globs as $glob) {

                $this->context['glob'] = $glob;
                echo "                ";
                var_export($glob);
                echo ",\n";
            }
            echo "        )\n    );\n}\n\nfunction get_watched_files() {\n    return ";
            echo var_export($input, true) . ";\n}\n\nfunction has_changed()\n{\n\n";
            foreach($dirs as $path => $ts) {

                $this->context['path'] = $path;
                $this->context['ts'] = $ts;
                echo "    if (!is_dir(";
                var_export($path);
                echo ") || filemtime(";
                var_export($path);
                echo ") > " . ($ts) . ") {\n        return ";
                var_export($path);
                echo ";\n    }\n";
            }
            echo "\n";
            foreach($files as $path => $ts) {

                $this->context['path'] = $path;
                $this->context['ts'] = $ts;
                echo "    if (!is_file(";
                var_export($path);
                echo ") || filemtime(";
                var_export($path);
                echo ") > " . ($ts) . ") {\n        return ";
                var_export($path);
                echo ";\n    }\n";
            }
            echo "\n    return false;\n}\n\n}\n\nreturn new Watcher;\n";

            if ($return) {
                return ob_get_clean();
            }

        }
    }

}

namespace WatchFiles {


    class Templates
    {
        public static function getAll()
        {
            return array (
                0 => 'template',
            );
        }

        public static function getAllSections($name, $fail = true)
        {
            switch ($name) {
            default:
                if ($fail) {
                    throw new \RuntimeException("Cannot find section {$name}");
                }

                return array();
            }
        }

        public static function exec($name, Array $context = array(), Array $global = array())
        {
            $tpl = self::get($name);
            return $tpl->render(array_merge($global, $context));
        }

        public static function get($name, Array $context = array())
        {
            static $classes = array (
                'template.tpl.php' => 'class_a4423e79cd6df51ca66b13affa3d681f3041bae4',
                'template' => 'class_a4423e79cd6df51ca66b13affa3d681f3041bae4',
            );
            $name = strtolower($name);
            if (empty($classes[$name])) {
                throw new \RuntimeException("Cannot find template $name");
            }

            $class = "\\" . $classes[$name];
            return new $class;
        }
    }

}
