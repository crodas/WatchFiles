<?php
/**
 *  This file was generated with crodas/SimpleView (https://github.com/crodas/SimpleView)
 *  Do not edit this file.
 *
 */

namespace {

    class base_template_cae776d793caf672c15e1210f1d0eb6609155ade
    {
        protected $parent;
        protected $child;
        protected $context;

        public function yield_parent($name, $args)
        {
            $method = "section_" . sha1($name);

            if (is_callable(array($this->parent, $method))) {
                $this->parent->$method(array_merge($this->context, $args));
                return true;
            }

            if ($this->parent) {
                return $this->parent->yield_parent($name, $args);
            }

            return false;
        }

        public function do_yield($name, Array $args = array())
        {
            if ($this->child) {
                // We have a children template, we are their base
                // so let's see if they have implemented by any change
                // this section
                if ($this->child->do_yield($name, $args)) {
                    // yes!
                    return true;
                }
            }

            // Do I have this section defined?
            $method = "section_" . sha1($name);
            if (is_callable(array($this, $method))) {
                // Yes!
                $this->$method(array_merge($this->context, $args));
                return true;
            }

            // No :-(
            return false;
        }

    }

    /** 
     *  Template class generated from Template.tpl.php
     */
    class class_a4423e79cd6df51ca66b13affa3d681f3041bae4 extends base_template_cae776d793caf672c15e1210f1d0eb6609155ade
    {

        public function render(Array $vars = array(), $return = false)
        {
            $this->context = $vars;

            extract($vars);
            if ($return) {
                ob_start();
            }
            echo "<?php\n\nnamespace " . ($ns) . ";\n\nfunction get_list() {\n    return array(\n        'files' => array(\n";
            foreach($files as $path => $ttl) {
                if (!empty($prefix)) {
                    echo "            \"";
                    echo htmlentities($prefix, ENT_QUOTES, 'UTF-8', false);
                    echo "\" . \"";
                    echo htmlentities($path, ENT_QUOTES, 'UTF-8', false);
                    echo "\",\n";
                }
                else {
                    echo "            __DIR__ . \"";
                    echo htmlentities($path, ENT_QUOTES, 'UTF-8', false);
                    echo "\",\n";
                }
            }
            echo "        ),\n        'dirs' => array(\n";
            foreach($dirs as $path => $ttl) {
                if (!empty($prefix)) {
                    echo "            \"";
                    echo htmlentities($prefix, ENT_QUOTES, 'UTF-8', false);
                    echo "\" . \"";
                    echo htmlentities($path, ENT_QUOTES, 'UTF-8', false);
                    echo "\",\n";
                }
                else {
                    echo "            __DIR__ . \"";
                    echo htmlentities($path, ENT_QUOTES, 'UTF-8', false);
                    echo "\",\n";
                }
            }
            echo "        ),\n        'glob' => array(\n";
            foreach($globs as $glob) {
                echo "                \"";
                echo htmlentities($glob, ENT_QUOTES, 'UTF-8', false);
                echo "\",\n";
            }
            echo "        )\n    );\n}\n\nfunction get_watched_files() {\n    return " . (var_export($input, true) ) . ";\n}\n\nfunction has_changed()\n{\n";
            if (!empty($prefix)) {
                $DIR = var_export($prefix, true);
            }
            else {
                $DIR = "__DIR__";
            }
            echo "\n";
            foreach($dirs as $path => $ts) {
                echo "    if (!is_dir(" . ($DIR) . " . \"";
                echo htmlentities($path, ENT_QUOTES, 'UTF-8', false);
                echo "\") || filemtime(" . ($DIR) . " . \"";
                echo htmlentities($path, ENT_QUOTES, 'UTF-8', false);
                echo "\") > " . ($ts) . ") {\n        return " . ($DIR) . " . \"";
                echo htmlentities($path, ENT_QUOTES, 'UTF-8', false);
                echo "\";\n    }\n";
            }
            echo "\n";
            foreach($files as $path => $ts) {
                echo "    if (!is_file(" . ($DIR) . " . \"";
                echo htmlentities($path, ENT_QUOTES, 'UTF-8', false);
                echo "\") || filemtime(" . ($DIR) . " . \"";
                echo htmlentities($path, ENT_QUOTES, 'UTF-8', false);
                echo "\") > " . ($ts) . ") {\n        return " . ($DIR) . " . \"";
                echo htmlentities($path, ENT_QUOTES, 'UTF-8', false);
                echo "\";\n    }\n";
            }
            echo "\n    return false;\n}\n";

            if ($return) {
                return ob_get_clean();
            }

        }
    }

}

namespace WatchFiles {

    class Templates
    {
        public static function exec($name, Array $context = array(), Array $global = array())
        {
            $tpl = self::get($name);
            return $tpl->render(array_merge($global, $context));
        }

        public static function get($name, Array $context = array())
        {
            static $classes = array (
                'template.tpl.php' => 'class_a4423e79cd6df51ca66b13affa3d681f3041bae4',
                'template' => 'class_a4423e79cd6df51ca66b13affa3d681f3041bae4',
            );
            $name = strtolower($name);
            if (empty($classes[$name])) {
                throw new \RuntimeException("Cannot find template $name");
            }

            $class = "\\" . $classes[$name];
            return new $class;
        }
    }

}
